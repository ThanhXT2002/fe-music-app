import { Injectable } from '@angular/core';
import { CapacitorSQLite, SQLiteConnection, SQLiteDBConnection } from '@capacitor-community/sqlite';
import { Capacitor } from '@capacitor/core';
import { Song, Album, Artist, Playlist, SearchHistoryItem, DataSong } from '../interfaces/song.interface';

/**
 * Service qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu SQLite cho ·ª©ng d·ª•ng nh·∫°c
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c thao t√°c CRUD v·ªõi b√†i h√°t, album, ngh·ªá sƒ© v√† playlist
 */
const DB_XTMUSIC = 'xtmusic_db';

@Injectable({
  providedIn: 'root'
})
export class DatabaseService {
  // K·∫øt n·ªëi SQLite ch√≠nh
  private sqlite: SQLiteConnection = new SQLiteConnection(CapacitorSQLite);
  // Instance c∆° s·ªü d·ªØ li·ªáu hi·ªán t·∫°i
  private db: SQLiteDBConnection | null = null;
  // Tr·∫°ng th√°i s·∫µn s√†ng c·ªßa database
  private isDbReady = false;

  constructor() {
    // Kh·ªüi t·∫°o database khi service ƒë∆∞·ª£c t·∫°o
    this.initializeDatabase();
  }
  /**
   * Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu v√† t·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt
   */
  async initializeDatabase() {
    try {
      console.log('üöÄ Starting database initialization...');
      console.log('Platform:', Capacitor.getPlatform());

      // Kh·ªüi t·∫°o web store n·∫øu ch·∫°y tr√™n web platform
      if (Capacitor.getPlatform() === 'web') {
        console.log('üì± Web platform detected, initializing web store...');
        await this.sqlite.initWebStore();
      }

      console.log('üîó Creating database connection...');
      // T·∫°o k·∫øt n·ªëi database v·ªõi t√™n 'xtmusic_db'
      this.db = await this.sqlite.createConnection(
        DB_XTMUSIC,
        false, // kh√¥ng m√£ h√≥a
        'no-encryption',
        1, // phi√™n b·∫£n database
        false
      );

      console.log('üîì Opening database...');
      // M·ªü k·∫øt n·ªëi database
      await this.db.open();

      console.log('üèóÔ∏è Creating tables...');
      // T·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt
      await this.createTables();
      this.isDbReady = true;
      console.log('‚úÖ Database initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing database:', error);
      this.isDbReady = false;
      throw error; // Re-throw ƒë·ªÉ caller c√≥ th·ªÉ handle
    }
  }

  /**
   * T·∫°o t·∫•t c·∫£ c√°c b·∫£ng c·∫ßn thi·∫øt cho ·ª©ng d·ª•ng
   */
  private async createTables() {
    if (!this.db) return;

    const queries = [
      `CREATE TABLE IF NOT EXISTS songs (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        artist TEXT NOT NULL,
        album TEXT,
        duration INTEGER NOT NULL,
        duration_formatted TEXT,
        thumbnail_url TEXT,
        audioUrl TEXT NOT NULL,
        filePath TEXT,
        addedDate TEXT NOT NULL,
        isFavorite INTEGER DEFAULT 0,
        genre TEXT
      );`,

      // B·∫£ng album - l∆∞u th√¥ng tin v·ªÅ c√°c album nh·∫°c
      `CREATE TABLE IF NOT EXISTS albums (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        artist TEXT NOT NULL,
        thumbnail TEXT,
        year INTEGER,
        genre TEXT,
        totalDuration INTEGER DEFAULT 0
      );`,

      // B·∫£ng ngh·ªá sƒ© - l∆∞u th√¥ng tin v·ªÅ c√°c ca sƒ©/nh√≥m nh·∫°c
      `CREATE TABLE IF NOT EXISTS artists (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        thumbnail TEXT,
        totalSongs INTEGER DEFAULT 0,
        bio TEXT
      );`,

      // B·∫£ng playlist - l∆∞u danh s√°ch ph√°t do ng∆∞·ªùi d√πng t·∫°o
      `CREATE TABLE IF NOT EXISTS playlists (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT,
        thumbnail TEXT,
        isSystemPlaylist INTEGER DEFAULT 0,
        createdDate TEXT NOT NULL,
        updatedDate TEXT NOT NULL
      );`,

      // B·∫£ng li√™n k·∫øt playlist-b√†i h√°t (many-to-many relationship)
      `CREATE TABLE IF NOT EXISTS playlist_songs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        playlistId TEXT NOT NULL,
        songId TEXT NOT NULL,
        position INTEGER NOT NULL,
        FOREIGN KEY (playlistId) REFERENCES playlists(id) ON DELETE CASCADE,
        FOREIGN KEY (songId) REFERENCES songs(id) ON DELETE CASCADE
      );`,

      // B·∫£ng c√†i ƒë·∫∑t ng∆∞·ªùi d√πng - l∆∞u c√°c t√πy ch·ªçn c√° nh√¢n
      `CREATE TABLE IF NOT EXISTS user_preferences (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL
      );`,

      // B·∫£ng l·ªãch s·ª≠ ph√°t - theo d√µi b√†i h√°t ƒë√£ nghe
      `CREATE TABLE IF NOT EXISTS recently_played (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        songId TEXT NOT NULL,
        playedAt TEXT NOT NULL,
        FOREIGN KEY (songId) REFERENCES songs(id) ON DELETE CASCADE
      );`,

      `CREATE TABLE IF NOT EXISTS search_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        songId TEXT NOT NULL,
        title TEXT NOT NULL,
        artist TEXT NOT NULL,
        thumbnail_url TEXT,
        audio_url TEXT NOT NULL,
        duration INTEGER NOT NULL,
        duration_formatted TEXT,
        keywords TEXT, -- JSON string c·ªßa keywords array
        searchedAt TEXT NOT NULL,
        isDownloaded INTEGER DEFAULT 0,
        UNIQUE(songId) -- M·ªói b√†i h√°t ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn trong l·ªãch s·ª≠
      );`,

      // Index ƒë·ªÉ t·ªëi ∆∞u performance
      `CREATE INDEX IF NOT EXISTS idx_search_history_date ON search_history(searchedAt DESC);`,
      `CREATE INDEX IF NOT EXISTS idx_search_history_song ON search_history(songId);`,
      `CREATE INDEX IF NOT EXISTS idx_search_history_downloaded ON search_history(isDownloaded);`

    ];

    // Th·ª±c thi t·ª´ng c√¢u l·ªánh t·∫°o b·∫£ng
    for (const query of queries) {
      await this.db.execute(query);
    }

    // T·∫°o c√°c playlist h·ªá th·ªëng m·∫∑c ƒë·ªãnh
    await this.createSystemPlaylists();
  }

  /**
   * T·∫°o c√°c playlist h·ªá th·ªëng m·∫∑c ƒë·ªãnh (Y√™u th√≠ch, Nghe g·∫ßn ƒë√¢y)
   */
  private async createSystemPlaylists() {
    if (!this.db) return;

    const systemPlaylists = [
      { id: 'favorites', name: 'Y√™u th√≠ch', description: 'C√°c b√†i h√°t y√™u th√≠ch' },
      { id: 'recent', name: 'Nghe g·∫ßn ƒë√¢y', description: 'B√†i h√°t ƒë√£ nghe g·∫ßn ƒë√¢y' }
    ];

    for (const playlist of systemPlaylists) {
      // Ki·ªÉm tra xem playlist ƒë√£ t·ªìn t·∫°i ch∆∞a
      const exists = await this.db.query(
        'SELECT id FROM playlists WHERE id = ?',
        [playlist.id]
      );

      // Ch·ªâ t·∫°o playlist n·∫øu ch∆∞a t·ªìn t·∫°i
      if (exists.values?.length === 0) {
        await this.db.run(
          `INSERT INTO playlists (id, name, description, isSystemPlaylist, createdDate, updatedDate)
           VALUES (?, ?, ?, 1, ?, ?)`,
          [
            playlist.id,
            playlist.name,
            playlist.description,
            new Date().toISOString(),
            new Date().toISOString()
          ]
        );
      }
    }
  }

  // === C√ÅC PH∆Ø∆†NG TH·ª®C X·ª¨ L√ù B√ÄI H√ÅT ===

  /**
   * Th√™m m·ªôt b√†i h√°t m·ªõi v√†o database
   * @param song - ƒê·ªëi t∆∞·ª£ng b√†i h√°t c·∫ßn th√™m
   * @returns Promise<boolean> - true n·∫øu th√†nh c√¥ng
   */
  async addSong(song: Song): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      await this.db.run(
        `INSERT OR REPLACE INTO songs
         (id, title, artist, album, duration, duration_formatted, thumbnail_url, audioUrl, filePath,
          addedDate, isFavorite, genre)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          song.id,
          song.title,
          song.artist,
          song.album || null,
          song.duration,
          song.duration_formatted || null,
          song.thumbnail || null,
          song.audioUrl,
          song.filePath || null,
          song.addedDate.toISOString(),
          song.isFavorite ? 1 : 0, // Chuy·ªÉn boolean th√†nh integer
          song.genre || null
        ]
      );
      return true;
    } catch (error) {
      console.error('Error adding song:', error);
      return false;
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ b√†i h√°t t·ª´ database, s·∫Øp x·∫øp theo ng√†y th√™m gi·∫£m d·∫ßn
   * @returns Promise<Song[]> - M·∫£ng c√°c b√†i h√°t
   */
  async getAllSongs(): Promise<Song[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query('SELECT * FROM songs ORDER BY addedDate DESC');
      return this.mapRowsToSongs(result.values || []);
    } catch (error) {
      console.error('Error getting songs:', error);
      return [];
    }
  }

  /**
   * L·∫•y th√¥ng tin b√†i h√°t theo ID
   * @param id - ID c·ªßa b√†i h√°t
   * @returns Promise<Song | null> - B√†i h√°t ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  async getSongById(id: string): Promise<Song | null> {
    if (!this.db || !this.isDbReady) return null;

    try {
      const result = await this.db.query('SELECT * FROM songs WHERE id = ?', [id]);
      const songs = this.mapRowsToSongs(result.values || []);
      return songs.length > 0 ? songs[0] : null;
    } catch (error) {
      console.error('Error getting song by id:', error);
      return null;
    }
  }

  /**
   * T√¨m ki·∫øm b√†i h√°t theo t√™n, ngh·ªá sƒ© ho·∫∑c album
   * @param query - T·ª´ kh√≥a t√¨m ki·∫øm
   * @returns Promise<Song[]> - Danh s√°ch b√†i h√°t ph√π h·ª£p
   */
  async searchSongs(query: string): Promise<Song[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query(
        `SELECT * FROM songs
         WHERE title LIKE ? OR artist LIKE ? OR album LIKE ?
         ORDER BY title ASC`,
        [`%${query}%`, `%${query}%`, `%${query}%`]
      );
      return this.mapRowsToSongs(result.values || []);
    } catch (error) {
      console.error('Error searching songs:', error);
      return [];
    }
  }

  /**
   * Th√™m b√†i h√°t v√†o l·ªãch s·ª≠ nghe g·∫ßn ƒë√¢y
   * @param songId - ID c·ªßa b√†i h√°t
   */
  async addToRecentlyPlayed(songId: string): Promise<void> {
    if (!this.db || !this.isDbReady) return;

    try {
      // Ch·ªâ th√™m v√†o danh s√°ch nghe g·∫ßn ƒë√¢y
      await this.db.run(
        'INSERT INTO recently_played (songId, playedAt) VALUES (?, ?)',
        [songId, new Date().toISOString()]
      );
    } catch (error) {
      console.error('Error adding to recently played:', error);
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ database rows th√†nh ƒë·ªëi t∆∞·ª£ng Song
   * @param rows - M·∫£ng c√°c row t·ª´ database
   * @returns Song[] - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng Song
   */
  private mapRowsToSongs(rows: any[]): Song[] {
    return rows.map(row => ({
      id: row.id,
      title: row.title,
      artist: row.artist,
      album: row.album,
      duration: row.duration,
      duration_formatted: row.duration_formatted,
      thumbnail: row.thumbnail_url, // S·ª≠ d·ª•ng ƒë√∫ng t√™n c·ªôt trong database
      audioUrl: row.audioUrl,
      filePath: row.filePath,
      addedDate: new Date(row.addedDate),
      isFavorite: row.isFavorite === 1, // Chuy·ªÉn integer th√†nh boolean
      genre: row.genre,
    }));
  }

  /**
   * X√≥a m·ªôt b√†i h√°t kh·ªèi database
   * @param songId - ID c·ªßa b√†i h√°t c·∫ßn x√≥a
   * @returns Promise<boolean> - true n·∫øu x√≥a th√†nh c√¥ng
   */
  async deleteSong(songId: string): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      await this.db.run('DELETE FROM songs WHERE id = ?', [songId]);
      return true;
    } catch (error) {
      console.error('Error deleting song:', error);
      return false;
    }
  }

  /**
   * X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong database (reset ·ª©ng d·ª•ng)
   * @returns Promise<boolean> - true n·∫øu x√≥a th√†nh c√¥ng
   */
  async clearAllData(): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      // X√≥a d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c b·∫£ng
      await this.db.run('DELETE FROM songs');
      await this.db.run('DELETE FROM albums');
      await this.db.run('DELETE FROM artists');
      await this.db.run('DELETE FROM playlists');
      await this.db.run('DELETE FROM playlist_songs');
      await this.db.run('DELETE FROM recently_played');

      console.log('All data cleared successfully');
      return true;
    } catch (error) {
      console.error('Error clearing all data:', error);
      return false;
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ playlist t·ª´ database
   * @returns Promise<Playlist[]> - Danh s√°ch t·∫•t c·∫£ playlist
   */
  async getAllPlaylists(): Promise<Playlist[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query('SELECT * FROM playlists ORDER BY name');
      return this.mapRowsToPlaylists(result.values || []);
    } catch (error) {
      console.error('Error getting playlists:', error);
      return [];
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ database rows th√†nh ƒë·ªëi t∆∞·ª£ng Playlist
   * @param rows - M·∫£ng c√°c row t·ª´ database
   * @returns Playlist[] - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng Playlist
   */
  private mapRowsToPlaylists(rows: any[]): Playlist[] {
    return rows.map(row => ({
      id: row.id,
      name: row.name,
      description: row.description,
      thumbnail: row.thumbnail,
      isSystemPlaylist: row.isSystemPlaylist === 1, // Chuy·ªÉn integer th√†nh boolean
      createdDate: new Date(row.createdDate),
      updatedDate: new Date(row.updatedDate),
      songs: [] // Danh s√°ch b√†i h√°t s·∫Ω ƒë∆∞·ª£c load ri√™ng khi c·∫ßn
    }));
  }

  /**
   * Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i y√™u th√≠ch c·ªßa b√†i h√°t
   * @param songId - ID c·ªßa b√†i h√°t
   * @returns Promise<boolean> - Tr·∫°ng th√°i y√™u th√≠ch m·ªõi
   */
  async toggleFavorite(songId: string): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      const song = await this.getSongById(songId);
      if (!song) return false;

      const newFavoriteStatus = !song.isFavorite;
      await this.db.run(
        'UPDATE songs SET isFavorite = ? WHERE id = ?',
        [newFavoriteStatus ? 1 : 0, songId]
      );

      return newFavoriteStatus;
    } catch (error) {
      console.error('Error toggling favorite:', error);
      return false;
    }
  }

  /**
   * L·∫•y danh s√°ch b√†i h√°t y√™u th√≠ch
   * @returns Promise<Song[]> - Danh s√°ch b√†i h√°t y√™u th√≠ch
   */
  async getFavoriteSongs(): Promise<Song[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query(
        'SELECT * FROM songs WHERE isFavorite = 1 ORDER BY addedDate DESC'
      );
      return this.mapRowsToSongs(result.values || []);
    } catch (error) {
      console.error('Error getting favorite songs:', error);
      return [];
    }
  }

  /**
   * L·∫•y danh s√°ch b√†i h√°t nghe g·∫ßn ƒë√¢y
   * @param limit - Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b√†i h√°t (m·∫∑c ƒë·ªãnh 50)
   * @returns Promise<Song[]> - Danh s√°ch b√†i h√°t nghe g·∫ßn ƒë√¢y
   */
  async getRecentlyPlayedSongs(limit: number = 50): Promise<Song[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query(
        `SELECT DISTINCT s.* FROM songs s
         INNER JOIN recently_played rp ON s.id = rp.songId
         ORDER BY rp.playedAt DESC
         LIMIT ?`,
        [limit]
      );
      return this.mapRowsToSongs(result.values || []);
    } catch (error) {
      console.error('Error getting recently played songs:', error);
      return [];
    }
  }

  /**
   * ƒê√≥ng k·∫øt n·ªëi database
   */
  async closeDatabase(): Promise<void> {
    if (this.db) {
      await this.db.close();
      this.db = null;
      this.isDbReady = false;
    }
  }

  /**
   * L∆∞u th√¥ng tin b√†i h√°t v√†o l·ªãch s·ª≠ t√¨m ki·∫øm (ngay sau khi g·ªçi API th√†nh c√¥ng)
   * @param youtubeData - Data t·ª´ YouTube API response
   */
  async addToSearchHistory(youtubeData: DataSong): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      console.log('Adding to search history:', youtubeData);
      // Ki·ªÉm tra xem b√†i h√°t ƒë√£ c√≥ trong l·ªãch s·ª≠ ch∆∞a
      const existing = await this.db.query(
        'SELECT id FROM search_history WHERE songId = ?',
        [youtubeData.id]
      );

      if (existing.values && existing.values.length > 0) {
        // C·∫≠p nh·∫≠t th·ªùi gian t√¨m ki·∫øm m·ªõi nh·∫•t
        await this.db.run(
          'UPDATE search_history SET searchedAt = ? WHERE songId = ?',
          [new Date().toISOString(), youtubeData.id]
        );
      } else {
        // Th√™m m·ªõi v√†o l·ªãch s·ª≠
        await this.db.run(
          `INSERT INTO search_history
           (songId, title, artist, thumbnail_url, audio_url, duration,
            duration_formatted, keywords, searchedAt, isDownloaded)
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0)`,
          [
            youtubeData.id,
            youtubeData.title,
            youtubeData.artist,
            youtubeData.thumbnail_url,
            youtubeData.audio_url,
            youtubeData.duration || 0,
            youtubeData.duration_formatted,
            JSON.stringify(youtubeData.keywords || []),
            new Date().toISOString()
          ]
        );
      }

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªãch s·ª≠ (gi·ªØ l·∫°i 100 b√†i g·∫ßn nh·∫•t)
      await this.db.run(
        `DELETE FROM search_history
         WHERE id NOT IN (
           SELECT id FROM search_history
           ORDER BY searchedAt DESC
           LIMIT 100
         )`
      );

      return true;
    } catch (error) {
      console.error('Error adding to search history:', error);
      return false;
    }
  }

  /**
   * L·∫•y danh s√°ch l·ªãch s·ª≠ t√¨m ki·∫øm (ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI)
   * @param limit - Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng (m·∫∑c ƒë·ªãnh 50)
   * @returns Promise<SearchHistoryItem[]>
   */
  async getSearchHistory(limit: number = 50): Promise<SearchHistoryItem[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query(
        'SELECT * FROM search_history ORDER BY searchedAt DESC LIMIT ?',
        [limit]
      );

      return (result.values || []).map(row => ({
        id: row.id,
        songId: row.songId,
        title: row.title,
        artist: row.artist,
        thumbnail_url: row.thumbnail_url,
        audio_url: row.audio_url,
        duration: row.duration,
        duration_formatted: row.duration_formatted,
        keywords: JSON.parse(row.keywords || '[]'),
        searchedAt: new Date(row.searchedAt),
        isDownloaded: row.isDownloaded === 1
      }));
    } catch (error) {
      console.error('Error getting search history:', error);
      return [];
    }
  }

  /**
   * T√¨m ki·∫øm trong l·ªãch s·ª≠ theo t√™n b√†i h√°t ho·∫∑c ngh·ªá sƒ©
   * @param query - T·ª´ kh√≥a t√¨m ki·∫øm
   * @returns Promise<SearchHistoryItem[]>
   */
  async searchInHistory(query: string): Promise<SearchHistoryItem[]> {
    if (!this.db || !this.isDbReady || !query.trim()) return [];

    try {
      const result = await this.db.query(
        `SELECT * FROM search_history
         WHERE title LIKE ? OR artist LIKE ?
         ORDER BY searchedAt DESC`,
        [`%${query}%`, `%${query}%`]
      );

      return (result.values || []).map(row => ({
        id: row.id,
        songId: row.songId,
        title: row.title,
        artist: row.artist,
        thumbnail_url: row.thumbnail_url,
        audio_url: row.audio_url,
        duration: row.duration,
        duration_formatted: row.duration_formatted,
        keywords: JSON.parse(row.keywords || '[]'),
        searchedAt: new Date(row.searchedAt),
        isDownloaded: row.isDownloaded === 1
      }));
    } catch (error) {
      console.error('Error searching in history:', error);
      return [];
    }
  }

  /**
   * L·∫•y b√†i h√°t t·ª´ l·ªãch s·ª≠ theo ID
   * @param songId - ID c·ªßa b√†i h√°t
   * @returns Promise<SearchHistoryItem | null>
   */
  async getSearchHistoryItem(songId: string): Promise<SearchHistoryItem | null> {
    if (!this.db || !this.isDbReady) return null;

    try {
      const result = await this.db.query(
        'SELECT * FROM search_history WHERE songId = ?',
        [songId]
      );

      if (!result.values || result.values.length === 0) return null;

      const row = result.values[0];
      return {
        id: row.id,
        songId: row.songId,
        title: row.title,
        artist: row.artist,
        thumbnail_url: row.thumbnail_url,
        audio_url: row.audio_url,
        duration: row.duration,
        duration_formatted: row.duration_formatted,
        keywords: JSON.parse(row.keywords || '[]'),
        searchedAt: new Date(row.searchedAt),
        isDownloaded: row.isDownloaded === 1
      };
    } catch (error) {
      console.error('Error getting search history item:', error);
      return null;
    }
  }

  /**
   * ƒê√°nh d·∫•u b√†i h√°t ƒë√£ ƒë∆∞·ª£c download
   * @param songId - ID c·ªßa b√†i h√°t
   */
  async markAsDownloaded(songId: string): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      await this.db.run(
        'UPDATE search_history SET isDownloaded = 1 WHERE songId = ?',
        [songId]
      );
      return true;
    } catch (error) {
      console.error('Error marking as downloaded:', error);
      return false;
    }
  }

  /**
   * L·∫•y danh s√°ch b√†i h√°t ƒë√£ download t·ª´ l·ªãch s·ª≠
   * @returns Promise<SearchHistoryItem[]>
   */
  async getDownloadedFromHistory(): Promise<SearchHistoryItem[]> {
    if (!this.db || !this.isDbReady) return [];

    try {
      const result = await this.db.query(
        'SELECT * FROM search_history WHERE isDownloaded = 1 ORDER BY searchedAt DESC'
      );

      return (result.values || []).map(row => ({
        id: row.id,
        songId: row.songId,
        title: row.title,
        artist: row.artist,
        thumbnail_url: row.thumbnail_url,
        audio_url: row.audio_url,
        duration: row.duration,
        duration_formatted: row.duration_formatted,
        keywords: JSON.parse(row.keywords || '[]'),
        searchedAt: new Date(row.searchedAt),
        isDownloaded: true
      }));
    } catch (error) {
      console.error('Error getting downloaded from history:', error);
      return [];
    }
  }

  /**
   * X√≥a m·ªôt b√†i h√°t kh·ªèi l·ªãch s·ª≠
   * @param songId - ID c·ªßa b√†i h√°t
   */
  async deleteFromSearchHistory(songId: string): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      await this.db.run('DELETE FROM search_history WHERE songId = ?', [songId]);
      return true;
    } catch (error) {
      console.error('Error deleting from search history:', error);
      return false;
    }
  }

  /**
   * X√≥a to√†n b·ªô l·ªãch s·ª≠ t√¨m ki·∫øm
   */
  async clearSearchHistory(): Promise<boolean> {
    if (!this.db || !this.isDbReady) return false;

    try {
      await this.db.run('DELETE FROM search_history');
      console.log('Search history cleared successfully');
      return true;
    } catch (error) {
      console.error('Error clearing search history:', error);
      return false;
    }
  }

  /**
   * L·∫•y th·ªëng k√™ l·ªãch s·ª≠ t√¨m ki·∫øm
   */
  async getSearchHistoryStats(): Promise<{
    totalSongs: number;
    downloadedSongs: number;
    pendingSongs: number;
  }> {
    if (!this.db || !this.isDbReady) {
      return { totalSongs: 0, downloadedSongs: 0, pendingSongs: 0 };
    }

    try {
      const result = await this.db.query(
        `SELECT
           COUNT(*) as totalSongs,
           SUM(CASE WHEN isDownloaded = 1 THEN 1 ELSE 0 END) as downloadedSongs,
           SUM(CASE WHEN isDownloaded = 0 THEN 1 ELSE 0 END) as pendingSongs
         FROM search_history`
      );

      const stats = result.values?.[0];
      return {
        totalSongs: stats?.totalSongs || 0,
        downloadedSongs: stats?.downloadedSongs || 0,
        pendingSongs: stats?.pendingSongs || 0
      };
    } catch (error) {
      console.error('Error getting search history stats:', error);
      return { totalSongs: 0, downloadedSongs: 0, pendingSongs: 0 };
    }
  }

  // === UTILITY METHODS ===

  /**
   * Chuy·ªÉn ƒë·ªïi SearchHistoryItem th√†nh Song object (ƒë·ªÉ add v√†o th∆∞ vi·ªán)
   * @param historyItem - Item t·ª´ l·ªãch s·ª≠ t√¨m ki·∫øm
   * @returns Song object
   */
  searchHistoryToSong(historyItem: SearchHistoryItem): Song {
    return {
      id: historyItem.songId,
      title: historyItem.title,
      artist: historyItem.artist,
      album: undefined,
      duration: historyItem.duration,
      duration_formatted: historyItem.duration_formatted,
      thumbnail: historyItem.thumbnail_url,
      audioUrl: historyItem.audio_url,
      filePath: undefined, // S·∫Ω ƒë∆∞·ª£c set sau khi download
      addedDate: new Date(),
      isFavorite: false,
      genre: this.extractGenreFromKeywords(historyItem.keywords) || undefined
    };
  }

  /**
   * Th√™m b√†i h√°t t·ª´ l·ªãch s·ª≠ v√†o th∆∞ vi·ªán ch√≠nh
   * @param songId - ID c·ªßa b√†i h√°t trong l·ªãch s·ª≠
   * @returns Promise<boolean>
   */
  async addSongFromHistory(songId: string): Promise<boolean> {
    try {
      const historyItem = await this.getSearchHistoryItem(songId);
      if (!historyItem) return false;

      const song = this.searchHistoryToSong(historyItem);
      const success = await this.addSong(song);

      if (success) {
        // ƒê√°nh d·∫•u ƒë√£ download trong l·ªãch s·ª≠
        await this.markAsDownloaded(songId);
      }

      return success;
    } catch (error) {
      console.error('Error adding song from history:', error);
      return false;
    }
  }

  /**
   * Tr√≠ch xu·∫•t genre t·ª´ keywords
   * @param keywords - M·∫£ng t·ª´ kh√≥a
   * @returns string ho·∫∑c undefined
   */
  private extractGenreFromKeywords(keywords: string[]): string | undefined {
    if (!keywords || keywords.length === 0) return undefined;

    const genreMap: Record<string, string> = {
      'remix': 'Remix',
      'acoustic': 'Acoustic',
      'live': 'Live',
      'cover': 'Cover',
      'piano': 'Piano',
      'guitar': 'Guitar',
      'ballad': 'Ballad',
      'rap': 'Rap',
      'hip hop': 'Hip Hop',
      'pop': 'Pop',
      'rock': 'Rock',
      'jazz': 'Jazz',
      'blues': 'Blues',
      'country': 'Country',
      'classical': 'Classical',
      'electronic': 'Electronic',
      'dance': 'Dance',
      'house': 'House',
      'techno': 'Techno',
      'tiktok': 'TikTok Hit',
      'trending': 'Trending'
    };

    for (const keyword of keywords) {
      const lower = keyword.toLowerCase();
      for (const [key, genre] of Object.entries(genreMap)) {
        if (lower.includes(key)) {
          return genre;
        }
      }
    }

    return undefined;
  }
}
